/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'java-library'
apply plugin: 'com.github.spotbugs'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

configurations {
    jacocoRuntime
}

dependencies {
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    testImplementation "org.slf4j:slf4j-api:${slf4jVersion}"
    testImplementation "org.testng:testng:${testngVersion}"

    constraints {
        implementation "com.fasterxml.jackson.core:jackson-databind:2.15.3"
        implementation "com.github.jknack:handlebars:4.2.0"
        implementation "com.google.code.findbugs:jsr305:3.0.2"
        implementation "info.picocli:picocli:4.7.5"
        implementation "io.swagger.core.v3:swagger-core:${swaggerCoreVersion}"
        implementation "io.swagger.core.v3:swagger-models:${swaggerCoreVersion}"
        implementation "io.swagger.parser.v3:swagger-parser:${swaggerParserVersion}"
        implementation "io.swagger.parser.v3:swagger-parser-safe-url-resolver:${swaggerParserVersion}"
        implementation "javax.ws.rs:javax.ws.rs-api:2.1.1"
        implementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-parser:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-cli:${ballerinaLangVersion}"
        implementation "org.ballerinalang:formatter-core:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-tools-api:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-runtime:${ballerinaLangVersion}"
        implementation "org.ballerinalang:language-server-commons:${ballerinaLangVersion}"
    }

    jacocoRuntime "org.jacoco:org.jacoco.agent:${jacoco.toolVersion}:runtime"
    checkstyle "com.puppycrawl.tools:checkstyle:${project.checkstylePluginVersion}"
}

sourceCompatibility = JavaVersion.VERSION_21

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle) {
    exclude excludePattern
}

checkstyle {
    toolVersion "${project.checkstylePluginVersion}"
    configFile rootProject.file("gradle/checkstyle/checkstyle.xml")
    configProperties = ["suppressionFile" : file("${rootDir}/gradle/checkstyle/suppressions.xml")]
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jacoco {
    toolVersion = "${project.jacocoVersion}"
}

test {
    systemProperty "ballerina.home", "$buildDir"
    systemProperty "org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog"
    testLogging {
        showStackTraces = true
        showStandardStreams = true
        events "failed"
        exceptionFormat "full"
    }
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/coverage-reports/jacoco.exec")
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
}

task validateSpotbugs() {
    doLast {
        if (spotbugsMain.reports.size() > 0 &&
                spotbugsMain.reports[0].destination.exists() &&
                spotbugsMain.reports[0].destination.text.readLines().size() > 0) {
            spotbugsMain.reports[0].destination?.eachLine {
                println 'Failure: ' + it
            }
            throw new GradleException("Spotbugs rule violations were found.")
        }
    }
}


spotbugsMain {
    def classLoader = plugins["com.github.spotbugs"].class.classLoader
    def SpotBugsConfidence = classLoader.findLoadedClass("com.github.spotbugs.snom.Confidence")
    def SpotBugsEffort = classLoader.findLoadedClass("com.github.spotbugs.snom.Effort")
    effort = SpotBugsEffort.MAX
    reportLevel = SpotBugsConfidence.LOW
    ignoreFailures = true
    reportsDir = file("$project.buildDir/reports/spotbugs")
    def excludeFile = file("${rootDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        it.excludeFilter = excludeFile
    }
    reports {
        text.enabled = true
    }
}

spotbugsTest {
    it.enabled = false
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = true
        xml.outputLocation = file("${project.buildDir}/reports/jacoco/report.xml")
        html.outputLocation = file("${project.buildDir}/reports/jacoco/report.html")
        csv.outputLocation = file("${project.buildDir}/reports/jacoco/report.csv")
    }
}

test.finalizedBy jacocoTestReport
spotbugsMain.finalizedBy validateSpotbugs
